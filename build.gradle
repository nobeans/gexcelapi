/*
 * Copyright 2009 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'groovy'
apply plugin: 'maven'

defaultTasks 'clean', 'test'

sourceCompatibility = 1.7
targetCompatibility = 1.7

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.fusesource.jansi:jansi:1.11'
    }
}

repositories {
    mavenCentral()
}

configurations {
    deployerJars
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.1.2'
    compile 'org.apache.poi:poi-ooxml:3.9'
    testCompile 'junit:junit:4.11'
    deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.2'
}

def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile) each { it.options.encoding = defaultEncoding }
tasks.withType(GroovyCompile) each { it.groovyOptions.encoding = defaultEncoding }

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars

        def configureAuth = {
            authentication(userName: cloudbeesUsername, password: cloudbeesPassword)
        }
        snapshotRepository(url: "https://repository-${cloudbeesUsername}.forge.cloudbees.com/snapshot", configureAuth)
        repository(url: "https://repository-${cloudbeesUsername}.forge.cloudbees.com/release", configureAuth)

        // License
        pom.project {
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
        }
    }
}

// Common configuration for unitTest and integrationTest
tasks.withType(Test) each {
    // show standard out and standard error of the test JVM(s) on the console
    it.testLogging.showStandardStreams = true


    it.beforeTest { desc ->
        AnsiColor.printlnAsTestResult """ - (${desc.className}) "${desc.name}" => """, true
        ext.watch = StopWatch.start()
    }
    it.afterTest { desc, result ->
        AnsiColor.printlnAsTestResult "${result.resultType} (${String.format('%.3f', ext.watch.wrap())} sec)"
    }
}

//===========================================
// Helper
//===========================================

import org.fusesource.jansi.AnsiConsole
import org.fusesource.jansi.Ansi

class AnsiColor {
    static init() {
        AnsiConsole.systemInstall()
        if (Boolean.valueOf(System.properties['no.color'] ?: false)) {
            Ansi.enabled = false
        }
    }

    static printlnAsInfo(text) {
        println Ansi.ansi().fg(Ansi.Color.CYAN).a(text).reset()
    }

    static printlnAsWarn(text) {
        println Ansi.ansi().fg(Ansi.Color.YELLOW).a(text).reset()
    }

    static printlnAsError(text) {
        println Ansi.ansi().fg(Ansi.Color.RED).a(text).reset()
    }

    static printlnAsTestResult(text, noLF = false) {
        def message = Ansi.ansi().render(text.replaceAll(/(SUCCESS)/, "@|green \$1|@").replaceAll(/(ERROR|FAILURE|FAILED)/, "@|red \$1|@").replaceAll(/org.jggug.kobo.groovyserv/, 'o.j.k.g'))
        if (noLF) {
            print message
            System.out.flush()
        } else {
            println message
        }
    }
}

class StopWatch {
    def startTime

    static start() { new StopWatch() }

    private StopWatch() {
        this.startTime = System.currentTimeMillis()
    }

    def wrap() {
        (System.currentTimeMillis() - startTime) / 1000
    }
}

/* bintray */
buildscript {
    apply from: file('gradle/buildscript.gradle'), to: buildscript
}
apply from: file('gradle/bintray.gradle')
